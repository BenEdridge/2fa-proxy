# Welcome to Serverless!
# For full config options, check the docs:
#    docs.serverless.com

service: aws-2fa-proxy
frameworkVersion: "=1.67.3"
custom: ${file(./config.yml)}

provider:
  name: aws
  region: ap-southeast-2
  description: Proxies and encrypts SMS messages received through Pinpoint
  runtime: nodejs12.x
  memorySize: 2048
  timeout: 10

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'sns:*'
      Resource:
          - Ref: ForwardingSnsTopic
    - Effect: 'Allow'
      Action:
        - 'sns:*'
      Resource:
          - Ref: ReceivingSnsTopic

package:
  include:
    - handler.js
    - openpgp.js
    - package.json
    - package-lock.json
    - node_modules
  exclude:
    - images/**
    - keys/**
    - .nvmrc
    - config.yml.example
    - config.yml
    - README.md
    - serverless.yml
    - structure.png

functions:
  2fa-proxy:
    handler: handler.entrypoint
    # Trigger lambda for SNS topic created in this file
    # See issues https://github.com/serverless/serverless/issues/5198
    events:
      - sns: 
          arn: !Ref ReceivingSnsTopic
          topicName: 2FAReceivingTopic
    environment:
      PUBLIC_KEY: ${self:custom.public_key}
      PHONE_NUMBER: ${self:custom.mobile}
      EMAIL: ${self:custom.email}
      TOPIC_ARN: ${self:resources.Outputs.OutputForwardingSNSTopic.Value}

# you can add CloudFormation resource templates here
resources:
  Resources:
    PinPointApp:
      Type: AWS::Pinpoint::App
      Properties:
        Name: ${self:service}
    # PinPoint SMS channels with short or long codes need to be manually requested via AWS console
    PinPointSmsChannel:
      Type: AWS::Pinpoint::SMSChannel
      Properties: 
        ApplicationId: !Ref PinPointApp
        Enabled: true
    ReceivingSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}
        TopicName: 2FARecevingTopic
    LambdaSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: lambda
        Endpoint: 
          Fn::GetAtt:
            - 2faDashproxyLambdaFunction
            - Arn
        TopicArn: !Ref ReceivingSnsTopic
    ForwardingSnsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}
        TopicName: 2FAForwardingTopic
    SmsSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sms
        Endpoint: ${self:custom.mobile}
        TopicArn: !Ref ForwardingSnsTopic
    EmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${self:custom.email}
        TopicArn: !Ref ForwardingSnsTopic
  #https://github.com/serverless-operations/serverless-step-functions/issues/78
  Outputs:
    OutputForwardingSNSTopic:
      Description: "The ARN of the forwarding SNS Topic for SMS, Email and Lambda forwarding"
      Value:
        Ref: ForwardingSnsTopic
